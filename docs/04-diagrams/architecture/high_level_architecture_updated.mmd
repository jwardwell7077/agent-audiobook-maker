```mermaid
flowchart LR
  subgraph Dev["Local-first (KISS today + spans-first two-stage)"]
    CLI["CLI (ingest, annotate)"]
    PDF[("PDF")]
    TXT[("Simple TXT")]
    JSONRaw[("JSON (per-chapter raw)")]
      JSONStruct(("Structured JSON (manifest + chapters)"))
    
  subgraph Anno["Spans-first two-stage Annotation"]
      DialogueAgent["Dialogue Classifier<br/>(Hybrid: Heuristic + AI)"]
      SpeakerAgent["Speaker Attribution<br/>(Character Database)"]
      CharDB[("Character DB<br/>(PostgreSQL)")]
    end
    
    Artifacts[("data/clean/<book>/<chapter>.json\n<pdf_stem>_volume.json")]
    Annos[("data/annotations/<book>/<chapter>.jsonl")]
  end

  CLI --> PDF --> TXT --> SectionClassifier --> Classified --> TxtStructured --> JSONStruct --> Artifacts
  Artifacts --> DialogueAgent
  DialogueAgent --> SpeakerAgent
  SpeakerAgent <--> CharDB
  SpeakerAgent --> Annos

  subgraph Later["Later (roadmap)"]
    Casting["Casting (character bible)"]
    SSML["SSML Assembly"]
    TTS["TTS (XTTS/Piper)"]
    Stems[("data/stems/…")]
    Renders[("data/renders/<book>/<chapter>.wav")]
    Master[("book_master.wav")]
    Orchestrator["Dagster / LangGraph"]
    DB[("Postgres (JSONB)")]
  end

  CharDB -.integrates.-> DB
  Annos -.-> Casting -.-> SSML -.-> TTS --> Stems --> Renders --> Master
  Orchestrator -.controls.-> JSONStruct
  Orchestrator -.controls.-> Anno
  Orchestrator -.controls.-> TTS

  Artifacts -.sync.-> DB
  Annos -.sync.-> DB
  Renders -.sync.-> DB
      %% Upstream structuring stages (added)
      SectionClassifier["Section Classifier"]
      Classified(("classified/front_matter.json | toc.json |\nchapters_section.json | back_matter.json"))
  TxtStructured["TXT→Structured (paragraphs[])"]
```
