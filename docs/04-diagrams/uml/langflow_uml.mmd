%% LangFlow Audiobook Component UML (Final MVP Specification)
%% Shows the complete class structure for the functional audiobook processing system

classDiagram
    direction TB

    %% Base LangFlow Framework
    class Component {
        <<abstract>>
        +display_name: str
        +description: str
        +icon: str
        +name: str
        +inputs: list[Input]
        +outputs: list[Output]
        +build() Data
        +log(msg: str) void
    }

    class Data {
        +data: Any
        +text: str
        +__init__(data: Any)
        +to_dict() dict
        +get(key: str, default: Any) Any
    }

    class Input {
        <<abstract>>
        +name: str
        +display_name: str
        +info: str
        +value: Any
    }

    class Output {
        +name: str
        +display_name: str
        +method: str
    }

    %% Input Specializations
    class StrInput {
        +value: str
        +multiline: bool
        +password: bool
    }

    class IntInput {
        +value: int
        +range: tuple
    }

    class BoolInput {
        +value: bool
    }

    class DataInput {
        +value: Data
        +input_types: list[str]
    }

    %% Core Pipeline Components
    class ABMChapterLoader {
        +display_name: "üìö ABM Chapter Loader"
        +description: "Unified loader: chapters_data, chapter_data, blocks_data"
        +icon: "book-open"
        +name: "ABMChapterLoader"
        +inputs: [StrInput book_name, StrInput base_data_dir, StrInput chapters_file, IntInput chapter_index, IntInput context_sentences]
        +outputs: [Output chapters_data, Output chapter_data, Output blocks_data]
        -_read_chapters() tuple[bool, dict]
        -_get_by_index(chapters: list, idx: int) dict
        -_split_into_sentences(text: str) list[str]
        -_blocks_from_paragraphs(paragraphs: list[str], title: str) list[dict]
    }

    class ABMChapterSelector {
        +display_name: "üéØ Chapter Selector"
        +description: "Selects chapters based on configurable criteria"
        +icon: "filter"
        +name: "abm_chapter_selector"
        +inputs: [DataInput chapters_data, DataInput selection_criteria, DataInput range_config]
        +outputs: [Output selected_chapters]
        -_select_by_index(chapters: list, index: int) dict
        -_select_by_title_fuzzy(chapters: list, title: str) dict
        -_validate_selection(chapter: dict) bool
        +build() Data
    }

    class ABMSegmentDialogueNarration {
        +display_name: "‚úÇÔ∏è Segment Dialogue Narration"
        +description: "Advanced dialogue/narration segmentation with ML classification"
        +icon: "message-square"
        +name: "abm_segment_dialogue_narration"
        +inputs: [DataInput chapter_content]
        +outputs: [Output segmented_utterances]
        -_sentence_boundary_detection(text: str) list[str]
        -_dialogue_heuristics(sentence: str) bool
        -_create_utterance_record(text: str, idx: int, is_dialogue: bool) dict
        -_apply_text_filters(text: str) str
        +build() Data
    }

    class ABMUtteranceFilter {
        +display_name: "üîç Utterance Filter"
        +description: "Multi-criteria utterance filtering with advanced logic"
        +icon: "filter"
        +name: "abm_utterance_filter"
        +inputs: [DataInput utterances, IntInput min_length, IntInput max_length, DataInput exclude_patterns, DataInput include_only]
        +outputs: [Output filtered_utterances]
        -_apply_length_filters(data: list, min_len: int, max_len: int) list
        -_apply_pattern_filters(data: list, patterns: list) list
        -_validate_filter_logic(config: dict) bool
        +build() Data
    }

    class ABMUtteranceJsonlWriter {
        +display_name: "üíæ Utterance JSONL Writer"
        +description: "Professional JSONL writer with comprehensive metadata"
        +icon: "file-text"
        +name: "abm_utterance_jsonl_writer"
        +inputs: [DataInput utterances_data, StrInput output_path]
        +outputs: [Output written_file_info]
        -_validate_annotation_schema(utterances: list, version: str) bool
        -_compute_text_hashes(utterances: list) list
        -_write_jsonl_atomic(data: list, path: str) bool
        +build() Data
    }

    %% Multi-Agent Enhancement Components
    class ABMSpeakerAttributionAgent {
        +display_name: "Speaker Attribution Agent"
        +description: "Identify speakers in dialogue using LLM and heuristics"
        +icon: "MaterialSymbolsPerson"
        +name: "abm_speaker_attribution_agent"
        +inputs: [DataInput utterances, BoolInput use_llm_fallback]
        +outputs: [Output speaker_utterances]
        -_extract_dialogue_utterances(utterances: list) list
        -_heuristic_speaker_detection(utterance: str) str
        -_llm_speaker_analysis(context: list, utterance: str) str
        -_confidence_scoring(method: str, result: str) float
        -_speaker_consistency_check(utterances: list) list
        +build() Data
    }

    class ABMEmotionClassifier {
        +display_name: "Emotion Classifier" 
        +description: "Classify emotional tone using local models"
        +icon: "MaterialSymbolsMood"
        +name: "abm_emotion_classifier"
        +inputs: [DataInput speaker_utterances, StrInput model_version]
        +outputs: [Output emotion_utterances]
        -_load_emotion_model(version: str) object
        -_preprocess_text_for_emotion(text: str) str
        -_predict_emotion_batch(texts: list) list
        -_apply_smoothing_rules(emotions: list, context: int) list
        -_emotion_confidence_calibration(prediction: dict) float
        +build() Data
    }

    class ABMQualityAssuranceAgent {
        +display_name: "Quality Assurance Agent"
        +description: "Validate annotation quality and flag issues"
        +icon: "MaterialSymbolsFactCheck"
        +name: "abm_quality_assurance_agent"
        +inputs: [DataInput annotated_utterances, DataInput qa_thresholds]
        +outputs: [Output qa_report]
        -_validate_speaker_consistency(utterances: list) list[str]
        -_validate_emotion_plausibility(utterances: list) list[str]
        -_check_confidence_thresholds(utterances: list, thresholds: dict) list[str]
        -_flag_potential_errors(utterances: list) list[dict]
        -_generate_qa_summary(flags: list) dict
        +build() Data
    }

    class ABMCharacterBibleBuilder {
        +display_name: "Character Bible Builder"
        +description: "Build comprehensive character profiles from utterances"
        +icon: "MaterialSymbolsMenuBook"
        +name: "abm_character_bible_builder"
        +inputs: [DataInput multi_chapter_utterances, IntInput min_utterance_count]
        +outputs: [Output character_profiles]
        -_extract_unique_speakers(utterances: list) set[str]
        -_compute_speaker_statistics(speaker: str, utterances: list) dict
        -_detect_character_aliases(speakers: set, utterances: list) dict
        -_analyze_speaking_patterns(speaker: str, utterances: list) dict
        -_generate_voice_profile_suggestions(character: dict) dict
        +build() Data
    }

    %% Audio Generation Pipeline Components
    class ABMProsodyGenerator {
        +display_name: "Prosody Generator"
        +description: "Generate prosodic markup for natural speech rendering"
        +icon: "MaterialSymbolsAudioFile"
        +name: "abm_prosody_generator"
        +inputs: [DataInput emotion_utterances, DataInput character_profiles]
        +outputs: [Output prosody_utterances]
        -_emotion_to_prosody_rules(emotion: str, confidence: float) dict
        -_character_voice_adjustments(character: str, profiles: dict) dict
        -_punctuation_to_breaks(text: str) str
        -_emphasis_detection(text: str) list[dict]
        -_rate_and_pitch_suggestions(utterance: dict) dict
        +build() Data
    }

    class ABMSSMLBuilder {
        +display_name: "SSML Builder"
        +description: "Build SSML markup for TTS rendering"
        +icon: "MaterialSymbolsCode"
        +name: "abm_ssml_builder"
        +inputs: [DataInput prosody_utterances, DataInput voice_mappings]
        +outputs: [Output ssml_documents]
        -_select_voice_for_character(character: str, mappings: dict) str
        -_build_ssml_tags(prosody: dict) str
        -_escape_ssml_content(text: str) str
        -_validate_ssml_syntax(ssml: str) bool
        -_chunk_long_utterances(utterance: dict, max_length: int) list
        +build() Data
    }

    class ABMTTSRenderer {
        +display_name: "TTS Renderer"
        +description: "Render audio stems from SSML using XTTS/Piper"
        +icon: "MaterialSymbolsMic"
        +name: "abm_tts_renderer"
        +inputs: [DataInput ssml_documents, StrInput tts_engine, DataInput voice_profiles]
        +outputs: [Output audio_stems]
        -_initialize_tts_engine(engine: str, profiles: dict) object
        -_render_xtts_batch(ssml_list: list, voice: str) list[bytes]
        -_render_piper_fallback(ssml: str, voice: str) bytes
        -_manage_gpu_queue(requests: list) list
        -_validate_audio_quality(audio: bytes) dict
        -_save_audio_stems(stems: list, metadata: dict) list[str]
        +build() Data
    }

    class ABMAudioMaster {
        +display_name: "Audio Master"
        +description: "Master audio stems into final audiobook"
        +icon: "MaterialSymbolsLibraryMusic"
        +name: "abm_audio_master"
        +inputs: [DataInput audio_stems, DataInput mastering_params]
        +outputs: [Output final_audio]
        -_load_audio_stems(stem_paths: list) list[bytes]
        -_normalize_loudness_ebu_r128(audio: bytes, target_lufs: float) bytes
        -_concatenate_chapter_stems(stems: list, crossfade_ms: int) bytes
        -_apply_dynamics_processing(audio: bytes, settings: dict) bytes
        -_generate_chapter_markers(stems: list) list[dict]
        -_export_final_formats(audio: bytes, formats: list) dict
        +build() Data
    }

    %% Utility Components
    class ABMPayloadLogger {
        +display_name: "Payload Logger"
        +description: "Debug and monitor data flow through pipeline"
        +icon: "MaterialSymbolsMonitorHeart"
        +name: "abm_payload_logger"
        +inputs: [DataInput payload, BoolInput echo_logs, StrInput log_level]
        +outputs: [Output passthrough_payload]
        -_generate_payload_preview(data: Any, max_chars: int) str
        -_structured_logging(level: str, msg: str, extra: dict) void
        -_performance_metrics(start_time: float, payload_size: int) dict
        +build() Data
    }

    class ABMCacheManager {
        +display_name: "Cache Manager"
        +description: "Hash-based deterministic caching across pipeline"
        +icon: "MaterialSymbolsDatabase"
        +name: "abm_cache_manager"
        +inputs: [DataInput content, StrInput operation, DataInput params]
        +outputs: [Output cached_result]
        -_compute_content_hash(content: Any) str
        -_compute_params_hash(params: dict, operation: str) str
        -_cache_lookup(hash_key: str) tuple[bool, Any]
        -_cache_store(hash_key: str, result: Any, ttl_hours: int) bool
        -_cache_invalidate_pattern(pattern: str) int
        +build() Data
    }

    %% Inheritance Relationships
    Component <|-- ABMChapterLoader
    Component <|-- ABMChapterSelector
    Component <|-- ABMSegmentDialogueNarration
    Component <|-- ABMUtteranceFilter
    Component <|-- ABMUtteranceJsonlWriter
    Component <|-- ABMSpeakerAttributionAgent
    Component <|-- ABMEmotionClassifier
    Component <|-- ABMQualityAssuranceAgent
    Component <|-- ABMCharacterBibleBuilder
    Component <|-- ABMProsodyGenerator
    Component <|-- ABMSSMLBuilder
    Component <|-- ABMTTSRenderer
    Component <|-- ABMAudioMaster
    Component <|-- ABMPayloadLogger
    Component <|-- ABMCacheManager

    Input <|-- StrInput
    Input <|-- IntInput
    Input <|-- BoolInput
    Input <|-- DataInput

    %% Composition Relationships
    Component --> Data : produces
    Component --> Input : configures
    Component --> Output : defines

    %% Data Flow Dependencies (active minimal pipeline)
    ABMChapterLoader --> ABMBlockSchemaValidator : blocks_data
    ABMBlockSchemaValidator --> ABMMixedBlockResolver : validated_blocks
    ABMMixedBlockResolver --> ABMSpanClassifier : spans
    ABMSpanClassifier --> ABMSpanAttribution : spans_cls
    ABMSpanAttribution --> ABMSpanIterator : spans_attr
    ABMDialogueClassifier --> ABMSpeakerAttribution : classified_utterance
    ABMSpeakerAttribution --> ABMResultsAggregator : attribution_result
    ABMResultsAggregator --> ABMResultsToUtterances : aggregated_results
    ABMResultsToUtterances --> ABMAggregatedJsonlWriter : utterances_data

    %% Cross-cutting Concerns
    ABMCacheManager ..> ABMChapterLoader : caches
    ABMCacheManager ..> ABMSpeakerAttributionAgent : caches
    ABMCacheManager ..> ABMEmotionClassifier : caches
    ABMCacheManager ..> ABMTTSRenderer : caches
    ABMPayloadLogger ..> ABMChapterLoader : logs
    ABMPayloadLogger ..> ABMSpeakerAttributionAgent : logs
    ABMPayloadLogger ..> ABMQualityAssuranceAgent : logs
    ABMPayloadLogger ..> ABMTTSRenderer : logs
