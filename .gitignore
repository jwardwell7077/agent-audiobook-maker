# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
# Explicitly ignore project egg-info (sanitized out of repo history)
agent.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
.venv311
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/
uv.lock
.langgraph_api/

# Project specific binary/artifact ignores
*.pdf
*.PDF
*.mp3
*.wav
*.ogg
*.flac
*.aiff
*.aif
*.aac
*.opus
*.m4a
*.m4b
*.mp4
*.webm
*.mkv
*.mov
*.bin
*.dat
*.zip
*.tar
*.tar.gz
*.tgz
*.7z
*.pickle
*.pkl
*.DS_Store
*.tmp
*.log.*
*.log
*.jpg
*.jpeg
*.png
*.gif
*.webp
*.svg
data/clean/**/*.pdf
data/books/**/*.pdf
*.db
*.db-journal

# Data directory handling:
#   Ignore everything by default, then selectively re-include the public synthetic sample.
#   Keep any non-public book content ignored (historical single-book prototype artifacts remain excluded).
data/**

# Re-include necessary parent directories for SAMPLE_BOOK so Git can track its contents.
!data/
!data/books/
!data/books/SAMPLE_BOOK/
!data/books/SAMPLE_BOOK/**

# The global *.pdf ignore above would still ignore the synthetic sample PDF, so explicitly un-ignore it.
!data/books/SAMPLE_BOOK/source_pdfs/synthetic_sample.pdf
!data/clean/SAMPLE_BOOK/**
!data/annotations/SAMPLE_BOOK/**
!data/renders/SAMPLE_BOOK/**
!data/stems/SAMPLE_BOOK/**

# Keep prototype / legacy private book directories ignored explicitly (redundant due to data/**, but self-documenting)
data/books/LEGACY_PRIVATE_*/**

# Ignore test data fixtures directory
/tests/test_data/

# Ignore temp working directory (ephemeral artifacts)
/temp/

# Local scratch artifacts
/tmp/

# Packaged outputs (audiobook containers)
*.m4b

# Pipeline run logs (redact from repo)
run_logs/
stageB/run_logs/

# MVS artifacts (explicitly ignored even though data/** is ignored; guards against re-includes)
data/clean/mvs/**

# Added during sanitization
logs/
temp/LEGACY_PRIVATE_*

# Generated pipeline artifacts (JSONL/meta/audio) â€” do not commit
/output/

# Runtime PIDs/state files
 # (Removed) LangFlow pid file
