name: Project Backfill

on:
  workflow_dispatch:
    inputs:
      includePRs:
        description: "Also add open PRs"
        required: false
        default: "true"

jobs:
  backfill:
    runs-on: ubuntu-latest
    steps:
      - name: Validate PROJECTS_TOKEN secret
        shell: bash
        run: |
          if [[ -z "${{ secrets.PROJECTS_TOKEN }}" ]]; then
            echo "PROJECTS_TOKEN secret is not set."
            echo "Create a classic PAT with 'project' and 'repo' scopes and add it as a repo secret named PROJECTS_TOKEN."
            echo "Then run this workflow from the Actions tab to backfill the board."
            exit 1
          fi
      - name: Backfill open issues (and PRs) into Project v2
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const includePRs = String((context?.payload?.inputs?.includePRs ?? 'true')).toLowerCase() === 'true';

            // Get Project v2 ID by number
            const { user } = await github.graphql(
              `query($login:String!, $number:Int!) { user(login:$login) { projectV2(number:$number) { id } } }`,
              { login: owner, number: 3 }
            );
            const projectId = user?.projectV2?.id;
            if (!projectId) throw new Error('Project v2 not found (user projects #3). Update number/owner in workflow.');

            core.info(`Project ID: ${projectId}`);

            // Collect open issues
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner, repo, state: 'open', per_page: 100
            });

            // Filter: exclude PRs unless includePRs
            const items = issues.filter(it => includePRs ? true : !it.pull_request);

            core.info(`Items to add: ${items.length} (includePRs=${includePRs})`);

            // For each, add to project (GraphQL addProjectV2ItemById)
            for (const it of items) {
              try {
                const nodeQuery = await github.graphql(
                  `query($owner:String!, $repo:String!, $number:Int!) { repository(owner:$owner, name:$repo) { issueOrPullRequest(number:$number) { ... on Issue { id } ... on PullRequest { id } } } }`,
                  { owner, repo, number: it.number }
                );
                const contentId = nodeQuery?.repository?.issueOrPullRequest?.id;
                if (!contentId) {
                  core.warning(`No node id for #${it.number}`);
                  continue;
                }
                await github.graphql(
                  `mutation($projectId:ID!, $contentId:ID!) { addProjectV2ItemById(input:{ projectId:$projectId, contentId:$contentId }) { item { id } } }`,
                  { projectId, contentId }
                );
                core.notice(`Added #${it.number} to project.`);
              } catch (err) {
                core.warning(`Failed adding #${it.number}: ${err.message}`);
              }
            }
