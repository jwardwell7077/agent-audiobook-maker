{
  "id": "abm.profiles",
  "path_globs": [
    "src/abm/profiles/**/*.py"
  ],
  "purpose": "Unknown",
  "key_components": [
    {
      "name": "ResolverConfig",
      "kind": "class",
      "file": "/workspace/agent-audiobook-maker/src/abm/profiles/alias_resolver.py",
      "summary": "Configuration for :mod:`alias_resolver`. Only a subset of the fields from the original design are currently used,\nbut the structure mirrors the proposed interface so that future extensions\nremain backwards compatible."
    },
    {
      "name": "Proposal",
      "kind": "class",
      "file": "/workspace/agent-audiobook-maker/src/abm/profiles/alias_resolver.py",
      "summary": "Proposed alias mapping."
    },
    {
      "name": "Style",
      "kind": "class",
      "file": "/workspace/agent-audiobook-maker/src/abm/profiles/character_profiles.py",
      "summary": "Prosody style parameters for a voice. Attributes:\n    pace: Speech pace multiplier."
    },
    {
      "name": "SpeakerProfile",
      "kind": "class",
      "file": "/workspace/agent-audiobook-maker/src/abm/profiles/character_profiles.py",
      "summary": "Configuration for a single character voice. Attributes:\n    name: Display name of the speaker."
    },
    {
      "name": "ProfileConfig",
      "kind": "class",
      "file": "/workspace/agent-audiobook-maker/src/abm/profiles/character_profiles.py",
      "summary": "Container for all profiles and defaults. Attributes:\n    version: Schema version number."
    },
    {
      "name": "Profile",
      "kind": "class",
      "file": "/workspace/agent-audiobook-maker/src/abm/profiles/character_profiles.py",
      "summary": "Minimal voice profile used by casting and alias resolver. Attributes:\n    id: Stable identifier for the profile."
    },
    {
      "name": "CharacterProfilesDB",
      "kind": "class",
      "file": "/workspace/agent-audiobook-maker/src/abm/profiles/character_profiles.py",
      "summary": "Unified view over profiles with helpers for casting/aliasing. The database can be loaded from two on-disk schemas:\n- JSON (tests and tools):\n    {\n      \"profiles\": [{...}],\n      \"map\": {\"Speaker\": \"profile_id\"},\n      \"fallbacks\": {\"engine\": \"profile_id\"}\n    }\n- YAML (human-edited casting file):\n    version: 1\n    defaults: { engine: ..., narrator_voice: ..."
    }
  ],
  "public_surfaces": [
    {
      "symbol": "main",
      "signature": "(argv)",
      "summary": "Unknown"
    },
    {
      "symbol": "normalize_name",
      "signature": "(name)",
      "summary": "Return a normalised version of ``name``. Normalisation follows a few simple heuristics: lower case, strip\npunctuation, collapse whitespace and drop a leading ``\"i \"`` pattern used by\nsome transcribers."
    },
    {
      "symbol": "harvest_mentions",
      "signature": "(refined_json)",
      "summary": "Extract speaker mentions from ``refined_json``. The structure of ``refined_json`` varies between pipelines."
    },
    {
      "symbol": "build_clusters",
      "signature": "(names, cfg)",
      "summary": "Group names that normalise to the same string. The full system would use a BK-tree and phonetic keys."
    },
    {
      "symbol": "score_candidate",
      "signature": "(norm, canonical_list, aliases_map, cfg)",
      "summary": "Return the best candidate canonical speaker and a confidence score."
    },
    {
      "symbol": "propose_aliases",
      "signature": "(refined_json, profiles_db, cfg)",
      "summary": "Return a list of :class:`Proposal` objects for potential aliases."
    },
    {
      "symbol": "apply_proposals",
      "signature": "(proposals, profiles_db)",
      "summary": "Apply auto-accepted proposals to ``profiles_db`` in-place."
    },
    {
      "symbol": "save_artifacts",
      "signature": "(proposals, out_dir)",
      "summary": "Persist proposal information to ``out_dir``. * ``proposals.jsonl`` \u2013 line-delimited :class:`Proposal` objects."
    },
    {
      "symbol": "normalize_speaker_name",
      "signature": "(name)",
      "summary": "Normalize a speaker name to a comparison key. The function trims leading/trailing whitespace, collapses internal\nwhitespace, and returns the casefolded result."
    },
    {
      "symbol": "load_profiles",
      "signature": "(path)",
      "summary": "Load a profile configuration file. The file may be YAML (preferred) or JSON."
    },
    {
      "symbol": "available_voices",
      "signature": "(cfg, engine)",
      "summary": "Return the declared voices for an engine."
    },
    {
      "symbol": "resolve_speaker_ex",
      "signature": "(cfg, speaker)",
      "summary": "Return the resolved profile and reason for ``speaker``. Args:\n    cfg: Loaded profile configuration."
    },
    {
      "symbol": "resolve_with_reason",
      "signature": "(cfg, speaker)",
      "summary": "Backward compatible wrapper around :func:`resolve_speaker_ex`."
    },
    {
      "symbol": "resolve_speaker",
      "signature": "(cfg, speaker)",
      "summary": "Resolve ``speaker`` to a profile using canonical names or aliases."
    },
    {
      "symbol": "validate_profiles",
      "signature": "(cfg)",
      "summary": "Validate a profile configuration. Args:\n    cfg: Loaded profile configuration."
    },
    {
      "symbol": "main",
      "signature": "(argv)",
      "summary": "Entry point for the profiles CLI."
    }
  ],
  "data_flow": "Unknown",
  "dependencies": {
    "imports_internal": [
      "abm.profiles",
      "abm.profiles.character_profiles",
      "abm.voice"
    ],
    "imports_external": [
      "__future__",
      "alias_resolver",
      "argparse",
      "collections",
      "dataclasses",
      "json",
      "logging",
      "math",
      "metaphone",
      "pathlib",
      "re",
      "sys",
      "typing",
      "yaml"
    ]
  },
  "configs_env": {
    "env_vars": [],
    "config_files": []
  },
  "cli_entrypoints": [
    {
      "file": "/workspace/agent-audiobook-maker/src/abm/profiles/alias_cli.py",
      "module": "abm.profiles",
      "command": "python -m abm.profiles.alias_cli",
      "flags": []
    },
    {
      "file": "/workspace/agent-audiobook-maker/src/abm/profiles/profiles_cli.py",
      "module": "abm.profiles",
      "command": "python -m abm.profiles.profiles_cli",
      "flags": []
    }
  ],
  "invariants": [],
  "edge_cases": [],
  "known_gotchas": [],
  "related_tests": [],
  "status": {
    "maturity": "Unknown",
    "owners": [],
    "last_touched_file_mtime": "2025-09-14T19:51:48.027289"
  }
}