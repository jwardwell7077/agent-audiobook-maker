{
  "file": "/workspace/agent-audiobook-maker/src/abm/annotate/segment.py",
  "module": "abm.annotate",
  "summary": "Unknown",
  "top_level_symbols": [
    {
      "name": "SpanType",
      "kind": "class",
      "methods": [],
      "doc": "Span categories emitted by the Segmenter."
    },
    {
      "name": "Span",
      "kind": "class",
      "methods": [],
      "doc": "A contiguous piece of text with a semantic label and absolute offsets."
    },
    {
      "name": "SegmenterConfig",
      "kind": "class",
      "methods": [],
      "doc": "Configuration for the Segmenter behavior."
    },
    {
      "name": "Segmenter",
      "kind": "class",
      "methods": [
        "__init__",
        "segment",
        "_segment_paragraph",
        "_iter_quote_spans",
        "_is_apostrophe",
        "_scan_until",
        "_compute_paragraph_starts",
        "_overlay_cut",
        "_merge_adjacent"
      ],
      "doc": "Produce offset-accurate spans from a normalized chapter. Expects the chapter to be normalized by ChapterNormalizer:\n  - `paragraphs`: list[str]\n  - `text`: single LF-joined string of all paragraphs\n  - `line_tags`: per-paragraph line tag labels (e.g., \"SystemAngle\", \"Meta\", ...)\n  - `inline_tags`: { str(para_index) : [ {start, end, tag}, ..."
    },
    {
      "name": "segment_spans",
      "kind": "function",
      "signature": "(chapter, config)",
      "doc": "Functional wrapper to keep compatibility with earlier code paths."
    }
  ],
  "io_contracts": {
    "inputs": [],
    "outputs": [],
    "file_patterns_written": [],
    "stdout_side_effects": []
  },
  "dependencies": {
    "imports_internal": [],
    "imports_external": [
      "__future__",
      "collections",
      "dataclasses",
      "enum",
      "typing"
    ]
  },
  "errors_raised": [],
  "env_vars": []
}